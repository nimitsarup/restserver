// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/nimitsarup/restserver/db"
	"github.com/nimitsarup/restserver/service"
	"sync"
)

// Ensure, that ServiceContainerMock does implement service.ServiceContainer.
// If this is not the case, regenerate this file with moq.
var _ service.ServiceContainer = &ServiceContainerMock{}

// ServiceContainerMock is a mock implementation of service.ServiceContainer.
//
// 	func TestSomethingThatUsesServiceContainer(t *testing.T) {
//
// 		// make and configure a mocked service.ServiceContainer
// 		mockedServiceContainer := &ServiceContainerMock{
// 			GetDBFunc: func() db.UsersInMemoryDB {
// 				panic("mock out the GetDB method")
// 			},
// 			GetHTTPServerFunc: func() service.HTTPServer {
// 				panic("mock out the GetHTTPServer method")
// 			},
// 			ShutdownFunc: func(ctx context.Context) error {
// 				panic("mock out the Shutdown method")
// 			},
// 		}
//
// 		// use mockedServiceContainer in code that requires service.ServiceContainer
// 		// and then make assertions.
//
// 	}
type ServiceContainerMock struct {
	// GetDBFunc mocks the GetDB method.
	GetDBFunc func() db.UsersInMemoryDB

	// GetHTTPServerFunc mocks the GetHTTPServer method.
	GetHTTPServerFunc func() service.HTTPServer

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// GetDB holds details about calls to the GetDB method.
		GetDB []struct {
		}
		// GetHTTPServer holds details about calls to the GetHTTPServer method.
		GetHTTPServer []struct {
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetDB         sync.RWMutex
	lockGetHTTPServer sync.RWMutex
	lockShutdown      sync.RWMutex
}

// GetDB calls GetDBFunc.
func (mock *ServiceContainerMock) GetDB() db.UsersInMemoryDB {
	if mock.GetDBFunc == nil {
		panic("ServiceContainerMock.GetDBFunc: method is nil but ServiceContainer.GetDB was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDB.Lock()
	mock.calls.GetDB = append(mock.calls.GetDB, callInfo)
	mock.lockGetDB.Unlock()
	return mock.GetDBFunc()
}

// GetDBCalls gets all the calls that were made to GetDB.
// Check the length with:
//     len(mockedServiceContainer.GetDBCalls())
func (mock *ServiceContainerMock) GetDBCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDB.RLock()
	calls = mock.calls.GetDB
	mock.lockGetDB.RUnlock()
	return calls
}

// GetHTTPServer calls GetHTTPServerFunc.
func (mock *ServiceContainerMock) GetHTTPServer() service.HTTPServer {
	if mock.GetHTTPServerFunc == nil {
		panic("ServiceContainerMock.GetHTTPServerFunc: method is nil but ServiceContainer.GetHTTPServer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetHTTPServer.Lock()
	mock.calls.GetHTTPServer = append(mock.calls.GetHTTPServer, callInfo)
	mock.lockGetHTTPServer.Unlock()
	return mock.GetHTTPServerFunc()
}

// GetHTTPServerCalls gets all the calls that were made to GetHTTPServer.
// Check the length with:
//     len(mockedServiceContainer.GetHTTPServerCalls())
func (mock *ServiceContainerMock) GetHTTPServerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetHTTPServer.RLock()
	calls = mock.calls.GetHTTPServer
	mock.lockGetHTTPServer.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *ServiceContainerMock) Shutdown(ctx context.Context) error {
	if mock.ShutdownFunc == nil {
		panic("ServiceContainerMock.ShutdownFunc: method is nil but ServiceContainer.Shutdown was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	return mock.ShutdownFunc(ctx)
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//     len(mockedServiceContainer.ShutdownCalls())
func (mock *ServiceContainerMock) ShutdownCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}
