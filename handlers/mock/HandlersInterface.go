// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/nimitsarup/restserver/handlers"
	"github.com/nimitsarup/restserver/model"
	"sync"
)

// Ensure, that HandlersInterfaceMock does implement handlers.HandlersInterface.
// If this is not the case, regenerate this file with moq.
var _ handlers.HandlersInterface = &HandlersInterfaceMock{}

// HandlersInterfaceMock is a mock implementation of handlers.HandlersInterface.
//
// 	func TestSomethingThatUsesHandlersInterface(t *testing.T) {
//
// 		// make and configure a mocked handlers.HandlersInterface
// 		mockedHandlersInterface := &HandlersInterfaceMock{
// 			AddUserFunc: func(body string) (int, error) {
// 				panic("mock out the AddUser method")
// 			},
// 			GetAllUsersFunc: func() (int, []model.User) {
// 				panic("mock out the GetAllUsers method")
// 			},
// 			GetUserFunc: func(id string) (int, *model.User) {
// 				panic("mock out the GetUser method")
// 			},
// 		}
//
// 		// use mockedHandlersInterface in code that requires handlers.HandlersInterface
// 		// and then make assertions.
//
// 	}
type HandlersInterfaceMock struct {
	// AddUserFunc mocks the AddUser method.
	AddUserFunc func(body string) (int, error)

	// GetAllUsersFunc mocks the GetAllUsers method.
	GetAllUsersFunc func() (int, []model.User)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(id string) (int, *model.User)

	// calls tracks calls to the methods.
	calls struct {
		// AddUser holds details about calls to the AddUser method.
		AddUser []struct {
			// Body is the body argument value.
			Body string
		}
		// GetAllUsers holds details about calls to the GetAllUsers method.
		GetAllUsers []struct {
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// ID is the id argument value.
			ID string
		}
	}
	lockAddUser     sync.RWMutex
	lockGetAllUsers sync.RWMutex
	lockGetUser     sync.RWMutex
}

// AddUser calls AddUserFunc.
func (mock *HandlersInterfaceMock) AddUser(body string) (int, error) {
	if mock.AddUserFunc == nil {
		panic("HandlersInterfaceMock.AddUserFunc: method is nil but HandlersInterface.AddUser was just called")
	}
	callInfo := struct {
		Body string
	}{
		Body: body,
	}
	mock.lockAddUser.Lock()
	mock.calls.AddUser = append(mock.calls.AddUser, callInfo)
	mock.lockAddUser.Unlock()
	return mock.AddUserFunc(body)
}

// AddUserCalls gets all the calls that were made to AddUser.
// Check the length with:
//     len(mockedHandlersInterface.AddUserCalls())
func (mock *HandlersInterfaceMock) AddUserCalls() []struct {
	Body string
} {
	var calls []struct {
		Body string
	}
	mock.lockAddUser.RLock()
	calls = mock.calls.AddUser
	mock.lockAddUser.RUnlock()
	return calls
}

// GetAllUsers calls GetAllUsersFunc.
func (mock *HandlersInterfaceMock) GetAllUsers() (int, []model.User) {
	if mock.GetAllUsersFunc == nil {
		panic("HandlersInterfaceMock.GetAllUsersFunc: method is nil but HandlersInterface.GetAllUsers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllUsers.Lock()
	mock.calls.GetAllUsers = append(mock.calls.GetAllUsers, callInfo)
	mock.lockGetAllUsers.Unlock()
	return mock.GetAllUsersFunc()
}

// GetAllUsersCalls gets all the calls that were made to GetAllUsers.
// Check the length with:
//     len(mockedHandlersInterface.GetAllUsersCalls())
func (mock *HandlersInterfaceMock) GetAllUsersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllUsers.RLock()
	calls = mock.calls.GetAllUsers
	mock.lockGetAllUsers.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *HandlersInterfaceMock) GetUser(id string) (int, *model.User) {
	if mock.GetUserFunc == nil {
		panic("HandlersInterfaceMock.GetUserFunc: method is nil but HandlersInterface.GetUser was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(id)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//     len(mockedHandlersInterface.GetUserCalls())
func (mock *HandlersInterfaceMock) GetUserCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}
